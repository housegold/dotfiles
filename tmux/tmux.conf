# https://github.com/seebi/tmux-colors-solarized/blob/master/tmuxcolors-256.conf
set-option -g status-bg colour235 #base02
set-option -g status-fg colour136 #yellow
set-option -g status-attr default

# # set window split
# bind-key v split-window -h
# bind-key b split-window

# default window title colors
set-window-option -g window-status-fg colour244 #base0
set-window-option -g window-status-bg default
#set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-fg colour166 #orange
# set-window-option -g window-status-current-bg colour240
set-window-option -g window-status-current-bg default
# set-window-option -g window-status-current-attr bright

# pane border
set-option -g pane-border-fg colour235 #base02
set-option -g pane-active-border-fg colour240 #base01

# message text
set-option -g message-bg colour235 #base02
set-option -g message-fg colour166 #orange

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange
# clock
set-window-option -g clock-mode-colour green #green


set -g status-interval 1
set -g status-justify centre # center align window list
set -g status-left-length 20
set -g status-right-length 140
set -g status-left '#[fg=green]#H #[fg=black]â€¢ #[fg=green,bright]#(uname -r | cut -c 1-6)#[default]'
set -g status-right '#[fg=green,bg=default,bright]#(tmux-mem-cpu-load 1) #[fg=red,dim,bg=default]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=white,bg=default]%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d'

# C-b is not acceptable -- Vim uses it
set-option -g prefix C-a
# bind-key C-a last-window

# Start numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# # Allows us to use C-a a <command> to send commands to a TMUX session inside 
# # another TMUX session
# bind-key a send-prefix

# Activity monitoring
# setw -g monitor-activity on
# set -g visual-activity on

# # Vi copypaste mode
# set-window-option -g mode-keys vi
# bind-key -t vi-copy 'v' begin-selection
# bind-key -t vi-copy 'y' copy-selection

# Copy mode behaves more like vim
set-window-option -g mode-keys vi
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-pipe "xclip -sel clip"
bind -t vi-copy V rectangle-toggle

# # hjkl pane traversal
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R

# bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# # reload config
# bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# auto window rename
set-window-option -g automatic-rename

# rm mouse mode fail
set -g mode-mouse off

# color
set -g default-terminal "screen-256color"

# status bar
set-option -g status-utf8 on

# # https://github.com/edkolev/dots/blob/master/tmux.conf
# # Updates for tmux 1.9's current pane splitting paths.
# if-shell "[[ `tmux -V` == *1.9* ]]" 'unbind c; bind c new-window -c "#{pane_current_path}"'
# if-shell "[[ `tmux -V` == *1.9* ]]" 'unbind s; bind s split-window -v -c "#{pane_current_path}"'
# if-shell "[[ `tmux -V` == *1.9* ]]" "unbind '\"'; bind '\"' split-window -v -c '#{pane_current_path}'"
# if-shell "[[ `tmux -V` == *1.9* ]]" 'unbind v; bind v split-window -h -c "#{pane_current_path}"'
# if-shell "[[ `tmux -V` == *1.9* ]]" 'unbind %; bind % split-window -h -c "#{pane_current_path}"'
# # https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard


# if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux/tmux-osx.conf'







# Ctrl-R: Reload tmux config
bind r source-file ~/.tmux.conf \; display 'Config reloaded'
bind C-R source-file ~/.tmux.conf \; display 'Config reloaded'

# Sane scrolling
# set -g terminal-overrides 'xterm*:smcup@:rmcup@'
set -g terminal-overrides '\*:smcup@:rmcup@'

# fang
# set -g terminal-overrides 'xterm:colors=256'



# Ctrl-V: Split pane vertically
bind v split-window -h -c "#{pane_current_path}"
bind C-V split-window -h -c "#{pane_current_path}"
# Ctrl-N: Split pane horizontally
# Reason why we're using N here is because it's much easier to reach
bind n split-window -v -c "#{pane_current_path}"
bind C-N split-window -v -c "#{pane_current_path}"

# Ctrl-[HJKL]: Switch panes
bind C-H select-pane -L
bind C-L select-pane -R
bind C-J select-pane -D
bind C-K select-pane -U

# Ctrl-Z: Switch to last pane
# bind C-Z last-pane
bind C-a last-pane

# Ctrl-O: Rotate pane
bind C-O rotate-window

# Ctrl-B: Break pane
bind C-B break-pane

# Ctrl-P: Next layout
bind C-P next-layout

# Ctrl-D: Detach
bind C-D detach-client

# Ctrl-0: Clock!
bind 0 clock-mode

# .: Rename session
bind . command-prompt -I "#S" "rename-session '%%'"

# ;: Command prompt
bind \; command-prompt

# /: List keys
bind / list-keys

# Ctrl-Arrow: Resize panes
bind -r C-Up resize-pane -U
bind -r C-Down resize-pane -D
bind -r C-Left resize-pane -L
bind -r C-Right resize-pane -R
bind -n C-Up resize-pane -U
bind -n C-Down resize-pane -D
bind -n C-Left resize-pane -L
bind -n C-Right resize-pane -R
bind -r C-Left resize-pane -L
bind -r C-Right resize-pane -R
# Alt keys generally deal with windows and sessions

 # Alt-h: Previous window
 bind -n M-h prev
 # Alt-Left: Previous window
 # bind -n M-Left prev
 # Alt-l: Next window
 bind -n M-l next
 # Alt-Right: Next window
 # bind -n M-Right next
 # Alt-n: New window
 bind -n M-n new-window -c "#{pane_current_path}"
 
# # fang
# bind -n M-n next
# bind -n M-p prev
# bind -n M-t new-window -c "#{pane_current_path}"

# Alt-Up: Switch to previous session
bind -n M-k switch-client -p \; refresh-client -S
# Alt-Down: Switch to next session
bind -n M-j switch-client -n \; refresh-client -S
# Alt-;: Last window
# In Vim, if I type Escape + ; too fast to exit out insert mode and go to
# command mode (which I do a lot), this sometimes gets triggered...
# bind -n M-\; last-window
# Alt-m: Move window
bind -n M-m command-prompt "move-window -t '%%'"
# Alt-r: Rename window
bind -n M-r command-prompt -I "#W" "rename-window '%%'"
# Alt-[0-9]: Switch to window
bind -n M-0 select-window -t :0
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9

# # Alt-Space: Choose session and refresh the status line to reflect the new
# # session name
# bind -n M-Space choose-session \; refresh-client -S
# # Alt-q: Choose last session
# bind -n M-q switch-client -l \; refresh-client -S
# # Alt-w: Close pane
# bind -n M-w kill-pane
# # Alt-\: Split veritically
# bind -n M-\ split-window -h -c "#{pane_current_path}"
# # Alt--: Split horizontally
# bind -n M-- split-window -v -c "#{pane_current_path}"
# # Alt-c: Copy mode
bind -n M-c copy-mode


# Ctrl-X: Paste current buffer
# bind x paste-buffer
# bind C-x paste-buffer

# Move x clipboard into tmux paste buffer
# bind C-v run "tmux set-buffer -- \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"

# Mouse mode
set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on

setw -g xterm-keys on

# Bind [ and ] to some common used layout
bind [ select-layout even-horizontal
bind ] select-layout even-vertical

# Always start a new session if one doesn't exist
# new-session

# # smart pane switching with awareness of vim splits
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"
